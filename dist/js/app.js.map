{"version":3,"sources":["../../js/app.js"],"names":["mimeType","journalismGraph","rdfstore","create","err","store","console","error","LDJapp","fileURLs","forEach","$","get","file","loadData","data","log","alert","load","numberOfTriples","stack","buttonId","dataDivId","click","button","val","text","yasqe","yasr","sparqlQuery","getValue","execute","status","results","length","sparqlJson","resultsToSPARQLJSON","setResponse","rdfStoreResult","sparqlJSON","head","link","vars","Object","keys","distinct","ordered","bindings","map","transformedResult","resultitem","key","type","mapType","token","parseFloat","value","datatype","JSON","stringify","types","uri","literal","ldjApp"],"mappings":"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","file":"app.js","sourcesContent":["/**\n * Created by reinv on 10-11-2016.\n */\n'use strict';\nconst mimeType = 'text/n3';\n\nconst journalismGraph = rdfstore.create((err, store) => {\n  if (err) return console.error(err);\n  return store;\n});\n\nclass LDJapp {\n  getData(fileURLs) {\n    fileURLs.forEach(file => {\n      $.get(file, data => this.loadData(data));\n      console.log(`Loading ${file}`);\n    });\n  }\n\n  loadData(data) {\n    alert('The data will now load. This will take a few seconds, I\\'ll tell you when I\\'m done');\n    journalismGraph.load(mimeType, data, (err, numberOfTriples) => {\n      if (err) {\n        console.log(`There was error ${err}`);\n        alert('There was an error loading the data');\n        return console.stack;\n      }\n      console.log(numberOfTriples + ' triples loaded');\n      alert('The data was loaded successfully');\n    });\n\n  }\n\n  bindLoadDataButton(buttonId, dataDivId) {\n    $(`#${buttonId}`).click(() => {\n      const button = $(`#${buttonId}`);\n      const data = $(`#${dataDivId}`).val();\n      button.text('Loading...');\n    });\n  }\n\n  bindQueryButton(buttonId, yasqe, yasr) {\n    $(`#${buttonId}`).click(() => {\n      const sparqlQuery = yasqe.getValue();\n      journalismGraph.execute(sparqlQuery, (status, results) => {\n        console.log(status);\n        if (!results) {\n          alert(status);\n          return console.error(status);\n        }\n        if (results.length) {\n          $(`#${buttonId}`).text(`Query yielded ${results.length} results`);\n          console.log(results);\n          const sparqlJson = this.resultsToSPARQLJSON(results);\n          console.log(sparqlJson);\n          yasr.setResponse(sparqlJson);\n        } else {\n          alert('The query yielded no results');\n        }\n      });\n    });\n  }\n\n  resultsToSPARQLJSON(rdfStoreResult) {\n    const sparqlJSON = {};\n    sparqlJSON.head = {\n      link: [],\n      vars: Object.keys(rdfStoreResult[0])\n    };\n    sparqlJSON.results = {\n      distinct: false,\n      ordered: false,\n      bindings: rdfStoreResult.map(resultitem => {\n        const transformedResult = resultitem;\n\n        Object.keys(resultitem)\n          .forEach(key => {\n            if (transformedResult[key]) {\n              transformedResult[key].type = this.mapType(transformedResult[key].token);\n              if (parseFloat(transformedResult[key].value) || parseFloat(transformedResult[key].value) === 0) {\n                  transformedResult[key].datatype = 'http://www.w3.org/2001/XMLSchema#double';\n              }\n              delete transformedResult[key].token;\n            } else {\n              delete transformedResult[key];\n            }\n          });\n        return transformedResult\n      })\n    };\n\n    return JSON.stringify(sparqlJSON);\n  }\n\n  mapType(type) {\n    const types = {\n      uri: 'uri',\n      literal: 'typed-literal'\n    };\n    return types[type];\n  }\n}\n\nconst ldjApp = new LDJapp();"]}