{"version":3,"sources":["app.js"],"names":[],"mappings":"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","file":"app-compiled.js","sourcesContent":["/**\r\n * Created by reinv on 10-11-2016.\r\n */\r\n'use strict';\r\nconst mimeType = 'text/n3';\r\n\r\nconst journalismGraph = rdfstore.create((err, store) => {\r\n  if (err) return console.error(err);\r\n  return store;\r\n});\r\n\r\nclass LDJapp {\r\n  getData(fileURLs) {\r\n    fileURLs.forEach(file => {\r\n      $.get(file, data => this.loadData(data));\r\n      console.log(`Loading ${file}`);\r\n    });\r\n  }\r\n\r\n  loadData(data) {\r\n    alert('The data will now load. This will take a few seconds, I\\'ll tell you when I\\'m done');\r\n    journalismGraph.load(mimeType, data, (err, numberOfTriples) => {\r\n      if (err) {\r\n        console.log(`There was error ${err}`);\r\n        alert('There was an error loading the data');\r\n        return console.stack;\r\n      }\r\n      console.log(numberOfTriples + ' triples loaded');\r\n      alert('The data was loaded successfully');\r\n    });\r\n\r\n  }\r\n\r\n  bindLoadDataButton(buttonId, dataDivId) {\r\n    $(`#${buttonId}`).click(() => {\r\n      const button = $(`#${buttonId}`);\r\n      const data = $(`#${dataDivId}`).val();\r\n      button.text('Loading...');\r\n    });\r\n  }\r\n\r\n  bindQueryButton(buttonId, yasqe, yasr) {\r\n    $(`#${buttonId}`).click(() => {\r\n      const sparqlQuery = yasqe.getValue();\r\n      journalismGraph.execute(sparqlQuery, (status, results) => {\r\n        console.log(status);\r\n        if (!results) {\r\n          alert(status);\r\n          return console.error(status);\r\n        }\r\n        if (results.length) {\r\n          $(`#${buttonId}`).text(`Query yielded ${results.length} results`);\r\n          console.log(results);\r\n          const sparqlJson = this.resultsToSPARQLJSON(results);\r\n          console.log(sparqlJson);\r\n          yasr.setResponse(sparqlJson);\r\n        } else {\r\n          alert('The query yielded no results');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  resultsToSPARQLJSON(rdfStoreResult) {\r\n    const sparqlJSON = {};\r\n    sparqlJSON.head = {\r\n      link: [],\r\n      vars: Object.keys(rdfStoreResult[0])\r\n    };\r\n    sparqlJSON.results = {\r\n      distinct: false,\r\n      ordered: false,\r\n      bindings: rdfStoreResult.map(resultitem => {\r\n        const transformedResult = resultitem;\r\n\r\n        Object.keys(resultitem)\r\n          .forEach(key => {\r\n            transformedResult[key].type = this.mapType(transformedResult[key].token);\r\n            if (parseFloat(transformedResult[key].value) || parseFloat(transformedResult[key].value) === 0) {\r\n              transformedResult[key].datatype = 'http://www.w3.org/2001/XMLSchema#double';\r\n            }\r\n            delete transformedResult[key].token;\r\n          });\r\n        return transformedResult\r\n      })\r\n    };\r\n\r\n    return JSON.stringify(sparqlJSON);\r\n  }\r\n\r\n  mapType(type) {\r\n    const types = {\r\n      uri: 'uri',\r\n      literal: 'typed-literal'\r\n    };\r\n    return types[type];\r\n  }\r\n}\r\n\r\nconst ldjApp = new LDJapp();"]}